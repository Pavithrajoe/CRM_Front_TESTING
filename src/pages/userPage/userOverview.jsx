import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { ENDPOINTS } from "../../api/constraints"; 

// 1. New Utility Function to assign colors based on POSITION/INDEX
const getPotentialColor = (index) => {
Â  switch (index) {
Â  Â  case 0: // 1st dynamic potential
Â  Â  Â  return { color: "text-red-600", bgColor: "bg-red-400" };
Â  Â  case 1: // 2nd dynamic potential
Â  Â  Â  return { color: "text-orange-600", bgColor: "bg-amber-300" };
Â  Â  case 2: // 3rd dynamic potential
Â  Â  Â  return { color: "text-blue-600", bgColor: "bg-blue-400" };
Â  Â  default:
Â  Â  Â  // Default colour
Â  Â  Â  return { color: "text-gray-700", bgColor: "bg-stone-300" };
Â  }
};

export default function User_Overview_KPIStats({ userId }) {Â 
Â  const [wonCount, setWonCount] = useState(0);
Â  const [activeCount, setActiveCount] = useState(0); 
Â  const [lostCount, setLostCount] = useState(0);
Â  const [websiteLeadCount, setWebsiteLeadCount] = useState(0);
Â  const [totalLeadCount, setTotalLeadCount] = useState(0);
Â  const [dynamicPotentials, setDynamicPotentials] = useState([]); 
Â  const [error, setError] = useState(null);
Â  const [loading, setLoading] = useState(true);
Â  const navigate = useNavigate();

Â  useEffect(() => {
Â  Â  const fetchKPIStats = async () => {
Â  Â  Â  if (!userId) {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  setError("User ID is required to fetch specific KPI data.");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  setLoading(true);
Â  Â  Â  setError(null);
Â  Â  Â  try {
Â  Â  Â  Â  const token = localStorage.getItem("token");
Â  Â  Â  Â  if (!token) {
Â  Â  Â  Â  Â  throw new Error("Authentication token not found.");
Â  Â  Â  Â  }
Â  Â  Â  Â  const response = await fetch(`${ENDPOINTS.LEADS_COUNT_BY_USER_ID}${userId}`, { 
Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  Â  });
Â  Â  Â  Â  const jsonRes = await response.json();
Â  Â  Â  Â  
Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  // Specific handling for 401 Unauthorized
Â  Â  Â  Â  Â  if (response.status === 401) {
Â  Â  Â  Â  Â  Â  navigate("/"); 
Â  Â  Â  Â  Â  Â  throw new Error("Session expired or unauthorized.");
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  throw new Error(jsonRes.message || `API Error: ${response.status}`);
Â  Â  Â  Â  }

Â  Â  Â  Â  // BINDING DATA TO STATE
Â  Â  Â  Â  const data = jsonRes.details;
        // console.log("Binding data: ", data)
Â  Â  Â  Â  
Â  Â  Â  Â  setTotalLeadCount(data.totalLeads || 0);
Â  Â  Â  Â  setWonCount(data.totalWon || 0);
Â  Â  Â  Â  setLostCount(data.totalLost || 0);
Â  Â  Â  Â  setActiveCount(data.totalActiveLeads || 0); 
Â  Â  Â  Â  setWebsiteLeadCount(data.totalWebsiteLeads || 0);
Â  Â  Â  Â  
Â  Â  Â  Â  // Extract and set dynamic potentials
Â  Â  Â  Â  const potentials = [
Â  Â  Â  Â  Â  data.dynamic_poten_1,
Â  Â  Â  Â  Â  data.dynamic_poten_2,
Â  Â  Â  Â  Â  data.dynamic_poten_3,
Â  Â  Â  Â  ].filter(p => p && p.name); 
Â  Â  Â  Â  
Â  Â  Â  Â  setDynamicPotentials(potentials);

Â  Â  Â  Â  setLoading(false);
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  setError(e.message);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchKPIStats();
Â  }, [userId, navigate]);Â 


Â  // Static/Core KPI data
Â  const staticKpiData = [
Â  Â  { title: "Total Leads", value: totalLeadCount, bgColor: "bg-stone-400" },
Â  Â  { title: "Active Leads", value: activeCount, bgColor: "bg-pink-300" }, 
Â  Â  { title: "Website Leads", value: websiteLeadCount, bgColor: "bg-orange-300" }, 
Â  Â  { title: "Total Lost", value: lostCount, bgColor: "bg-purple-400" },
Â  Â  { title: "Total Won", value: wonCount, color: "text-green-600", bgColor: "bg-green-400" }, 
Â  ];

Â  // Dynamic Potential KPI data 
Â  const potentialKpiData = dynamicPotentials.map((p, index) => {
Â  Â  const colorStyle = getPotentialColor(index); Â  Â  // Assign colors based on the index 
Â  Â  
Â  Â  return {
Â  Â  Â  title: p.name,
Â  Â  Â  value: p.count,
Â  Â  Â  color: colorStyle.color,
Â  Â  Â  bgColor: colorStyle.bgColor
Â  Â  };
Â  });

Â  //  Combine the arrays for the two-row layout (4 + 4)
Â  const kpiData = [
Â  Â  staticKpiData[0], // Total Leads
Â  Â  staticKpiData[1], // Active Leads
Â  Â  staticKpiData[2], // Website Leads
Â  Â  staticKpiData[3], // Total Lost
Â  Â  
Â  Â  ...potentialKpiData, //  Potentials (1st = Red, 2nd = Orange, 3rd = Blue)
Â  Â  staticKpiData[4] // Total Won
Â  Â  
Â  ].slice(0, 8); 

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="text-center text-gray-400 py-8 text-lg font-medium">
Â  Â  Â  Â  Loading KPI data for user {userId}... ðŸš€
Â  Â  Â  </div>
Â  Â  );
Â  }
Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className="text-center text-red-500 py-8 text-lg font-medium">
Â  Â  Â  Â  Error fetching KPI data: {error}
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="px-4 py-6">
Â  Â  Â  <div className="max-w-5xl mx-auto space-y-6">Â 
        
        {/* Title for the First Row */}
        <h2 className="text-2xl font-bold text-gray-800 mb-4 tracking-tight border-b pb-2">
            Core Lead Metrics
        </h2>

Â  Â  Â  Â  {/* First row: 4 Core KPIs */}
Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 gap-6">Â 
Â  Â  Â  Â  Â  {kpiData.slice(0, 4).map((kpi, index) => (
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  key={index}
Â  Â  Â  Â  Â  Â  Â  className={`border border-white/30 rounded-xl p-4 shadow-sm cursor-pointer ${kpi.bgColor}`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg text-center font-bold text-gray-900 mb-1 tracking-tight">
Â  Â  Â  Â  Â  Â  Â  Â  {kpi.title}
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-center text-gray-900">{kpi.value}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>

        {/* Title for the Second Row */}
        <h2 className="text-2xl font-bold text-gray-800 mb-4 tracking-tight border-b pb-2 pt-6">
            Lead Potential & Outcomes
        </h2>

Â  Â  Â  Â  {/* Second row: Potentials + WON card */}
Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 gap-6">Â 
Â  Â  Â  Â  Â  {kpiData.slice(4).map((kpi, index) => (
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  key={index + 4}Â 
Â  Â  Â  Â  Â  Â  Â  className={`border border-white/30 rounded-xl p-4 shadow-sm cursor-pointer ${kpi.bgColor}`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-col justify-between h-full">
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg text-center font-bold text-gray-900 mb-1 tracking-tight">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {kpi.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold text-center text-gray-900">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {kpi.value}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}


